# Copyright (C) 2022 Rochus Keller (me@rochus-keller.ch) for LeanQt
# licensed under GPL/LGPL

let hello* : Executable {
	.sources += ./hello.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let objects_moc : Moc {
	.sources += ./objects.cpp
}

let objects* : Executable {
	.sources += ./objects.cpp
	.deps += [ ^libqtcore objects_moc ]
	.include_dirs += build_dir()
	.configs += ^core_client_config
}

let threads* : Executable {
	.sources += ./threads.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let process* : Executable {
	.sources += ./process.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let dnslookup_moc : Moc {
	.sources += ./dnslookup.h
}

let dnslookup* : Executable {
	.sources += ./dnslookup.cpp
	.deps += [ ^libqtcore ^libqtnetwork dnslookup_moc ]
	.configs += [ ^core_client_config ^net_client_config ]
}

let runner* : Executable {
	.sources += ./runner.cpp
	.deps += [ ^libqtcore ^libqtconcurrent ]
	.configs += [ ^core_client_config ^concurrent_client_config ]
}

let download_moc : Moc {
	.sources += ./download.cpp
}

let download* : Executable {
	.sources += ./download.cpp
	.deps += [ ^libqtcore ^libqtnetwork download_moc ]
	.include_dirs += build_dir()
	.configs += [ ^core_client_config ^net_client_config ]
}

let transform* : Executable {
	.sources += ./transform.cpp
	.deps += ^libqtcore
	if ^HAVE_GUI {
		.deps += ^libqtgui
		if target_os == `win32 {
			.deps += ^libqtwinmain
		}
		.configs += [ ^core_client_config ^gui_client_config ]
	} else {
		.deps += ^libqtimage;
		.configs += [ ^core_client_config ^image_client_config ]
	}
}

let clock_moc : Moc {
	.sources += ./rasterwindow.h
}

let clock* : Executable {
	.sources += [ ./rasterwindow.cpp ./clock.cpp ]
	.deps += [ ^libqtcore ^libqtgui clock_moc ]
	if target_os == `win32 {
		.deps += ^libqtwinmain
	}
	.configs += [ ^core_client_config ^gui_client_config ]
}

let calc_moc : Moc {
	.sources += ./calculator.h
}

let calculator* : Executable {
	.sources += ./calculator.cpp
	.deps += [ ^libqtcore ^libqtgui ^libqtwidgets calc_moc ]
	if target_os == `win32 {
		.deps += ^libqtwinmain
	}
	.configs += [ ^core_client_config ^gui_client_config ^widgets_client_config	]
}

let chart_moc : Moc {
	.sources += ./chart.h
}

let chart* : Executable {
	.sources += ./chart.cpp
	.deps += [ ^libqtcore ^libqtgui ^libqtwidgets chart_moc ]
	if target_os == `win32 {
		.deps += ^libqtwinmain
	}
	.configs += [ ^core_client_config ^gui_client_config ^widgets_client_config	]
}

let colorlist_moc : Moc {
	.sources += ./colorlist.h
}

let colorlist* : Executable {
	.sources += ./colorlist.cpp
	.deps += [ ^libqtcore ^libqtgui ^libqtwidgets colorlist_moc ]
	if target_os == `win32 {
		.deps += ^libqtwinmain
	}
	.configs += [ ^core_client_config ^gui_client_config ^widgets_client_config	]
}

let mainwindow_moc : Moc {
	.sources += [ ./mainwindow.h ./mainwindow.cpp ]
}

let mainwindow* : Executable {
	.sources += ./mainwindow.cpp
	.deps += [ ^libqtcore ^libqtgui ^libqtwidgets mainwindow_moc ]
	if target_os == `win32 {
		.deps += ^libqtwinmain
	}
	.configs += [ ^core_client_config ^gui_client_config ^widgets_client_config	]
	.include_dirs += build_dir()
}

