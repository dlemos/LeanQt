# Copyright (C) 2022 Rochus Keller (me@rochus-keller.ch) for LeanQt
# licensed under GPL/LGPL

let hello* : Executable {
	.sources += ./hello.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let objects_moc : Moc {
	.sources += ./objects.cpp
}

let objects* : Executable {
	.sources += ./objects.cpp
	.deps += [ ^libqtcore objects_moc ]
	.include_dirs += build_dir()
	.configs += ^core_client_config
}

let threads* : Executable {
	.sources += ./threads.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let process* : Executable {
	.sources += ./process.cpp
	.deps += ^libqtcore;
	.configs += ^core_client_config
}

let dnslookup_moc : Moc {
	.sources += ./dnslookup.h
}

let dnslookup* : Executable {
	.sources += ./dnslookup.cpp
	.deps += [ ^libqtcore ^libqtnetwork dnslookup_moc ]
	.configs += ^net_client_config
}

let concurrent* : Executable {
	.sources += ./concurrent.cpp
	.deps += [ ^libqtcore ^libqtconcurrent ]
	.configs += ^concurrent_client_config
}

let download_moc : Moc {
	.sources += ./download.cpp
}

let download* : Executable {
	.sources += ./download.cpp
	.deps += [ ^libqtcore ^libqtnetwork download_moc ]
	.include_dirs += build_dir()
	.configs += ^net_client_config
}

let transform* : Executable {
	.sources += ./transform.cpp
	.deps += ^libqtcore
	if ^HAVE_GUI {
		.deps += ^libqtgui;
		.configs += ^gui_client_config	
	} else {
		.deps += ^libqtimage;
		.configs += ^image_client_config
	}
}

let clock_moc : Moc {
	.sources += ./rasterwindow.h
}

let clock* : Executable {
	.sources += [ ./rasterwindow.cpp ./clock.cpp ]
	.deps += [ ^libqtcore ^libqtgui clock_moc ]
	.configs += ^gui_client_config	
}

